"""
    julia SDP-min-entanglement.jl ùêß Œ∏ P‚ÇÉ [file]

Script used in [arXiv:2210.10357](https://arxiv.org/abs/2210.10357) for minimizing
entanglement over positive partial transpose states, to find the threshold for a
dynamic-based entanglement witness. See the paper for more detail.

# Arguments
- `ùêß::Integer`: Hilbert space truncation; energy constraints on the normal modes
- `Œ∏::Float`: Angle, in radians, of passive transformation that relates physical
  modes to normal modes
- `P‚ÇÉ::Vector{Float}`: Observed violation of precession protocol
- `file::String`: File to save the data. Returns to standard output if none specified

# Package versions
For the reported results, version 1.6.6 of `julia` was used, with the packages
- `Convex`: 0.15.1
- `SCS`: 1.1.2
- `Memoization`: 0.1.14
"""
ùêß  = parse(Int,ARGS[1])
Œ∏  = parse(Float64,ARGS[2])
P‚ÇÉ = parse.(Float64,split(ARGS[3],","))
file = length(ARGS) ‚â• 4 ? ARGS[4] : false

# Number of threads for parallel computation
numThreads = Threads.nthreads()

using LinearAlgebra, SparseArrays, Convex, SCS, Memoization, Dates

"""
    binCoef(x)

Returns 2‚ÅªÀ£ √ó choose(x,‚åäx/2‚åã). For `x` ‚â§ 62, the exact value is returned.
For x > 62, a series where log(binCoef(x)) is of order O(1/x¬≤¬π) is used.
"""
function binCoef(x)
    x = 2*(x√∑2)
    if x ‚â§ 62
        return binomial(BigInt(x),BigInt(x√∑2))/2^x
    else
        # We use 2‚ÅªÀ£ √ó choose(x,‚åäx/2‚åã) = exp(f(x) + O(1/x¬≤¬π)) √ó ‚àö(2/(œÄ*x))
        x = BigFloat(x)
        fx = exp(
                -1/4x + 1/24x^3 - 1/20x^5 + 17/112x^7 - 31/36x^9 +
                691/88x^11 - 5461/52x^13 + 929569/480x^15 - 3202291/68x^17 + 221930581/152x^19
            )
        return fx/‚àö(œÄ*x/2)
    end
end

"""
    sgnX(n‚ÇÅ,n‚ÇÇ)

Returns ‚ü®n‚ÇÅ|sgn(X)|n‚ÇÇ‚ü©; see Eq. (D11) of [arXiv:2204.10498](https://arxiv.org/abs/2204.10498)
"""
function sgnX(n‚ÇÅ,n‚ÇÇ)
    if (n‚ÇÅ-n‚ÇÇ)%2 == 0
        return 0
    else
        if n‚ÇÇ%2 == 0
            n‚ÇÅ,n‚ÇÇ = n‚ÇÇ,n‚ÇÅ
        end
        return (-1.0)^((n‚ÇÇ-n‚ÇÅ-1)√∑2)/(n‚ÇÇ-n‚ÇÅ)*‚àö(n‚ÇÇ*binCoef(n‚ÇÅ)*binCoef(n‚ÇÇ-1)*2/œÄ)
    end
end

"""
    BS(Œ∏=œÄ/4;œï‚ÇÄ=0,œï‚ÇÅ=0,ùêß=1)

Returns the passive transformation (a‚Çä,a‚Çã) ‚Üí (a‚ÇÅ,a‚ÇÇ) in the Fock space basis,
where Œ∏ is the angle, œï‚ÇÄ and œï‚ÇÅ are the phases, and ùêß is the truncation for each
space. Refer to Eq. (6) of [arXiv:2210.10357](https://arxiv.org/abs/2210.10357) for the passive transformation.
"""
function BS(Œ∏=œÄ/4;œï‚ÇÄ=0,œï‚ÇÅ=0,ùêß=1)
    U = spzeros(ComplexF64,(2ùêß+1)^2,(ùêß+1)^2)
    for n ‚àà 0:ùêß
        for m ‚àà 0:ùêß
            for s ‚àà 0:m+n
                U[(2ùêß+1)*s+m+n-s+1,(ùêß+1)*m+n+1] = sum(
                    ‚àö(
                        binomial(BigInt(s),BigInt(j))*
                        binomial(BigInt(m+n-s),BigInt(m-j))*
                        binomial(BigInt(m),BigInt(j))*
                        binomial(BigInt(n),BigInt(s-j))
                    )*
                    cos(big(Œ∏))^(2j+n-s)*
                    sin(big(Œ∏))^(m+s-2j)*
                    exp(-im*œï‚ÇÄ*(s-n))*
                    exp(-im*œï‚ÇÅ*(m-s))*
                    (-1)^(s-j)
                    for j ‚àà max(s-n,0):min(s,m)
                ) |> ComplexF64
            end
        end
    end
    return U
end

"""
    GellMann_f(k,j,d)

Defines the generalised GellMann matrices (GMM) f‚Çñ‚±º of dimension `d`, which forms
part of the Hermitian orthonormal basis operators as defined in Eqs. (3)‚Äî(5) of
[arXiv:0806.1174](https://arxiv.org/abs/0806.1174). When `k` = `j`, the diagonal GMMs are returned;
the symmetric GMM when `k` < `j`; and the antisymmetric GMM when `k` > `j`.
"""
function GellMann_f(k,j,d)
    if k == j
        return GellMann_h(k,d)
    elseif k < j
        M = spzeros(ComplexF64,d,d)
        M[j,k] = M[k,j] = 1/‚àö2
        return M
    elseif k > j
        M = spzeros(ComplexF64,d,d)
        M[j,k] = -im/‚àö2
        M[k,j] =  im/‚àö2
        return M
    end
end

"""
    GellMann_h(k,d)

Defines the diagonal generalised GellMann matrices (GMM) h‚Çñ of dimension `d`.
Since `GellMann_h(k,d)` is defined recursively, `@memoize` is used to remember
the output of a previously-called instance
"""
@memoize function GellMann_h(k,d)
    if k==1
        return sparse(I(d)/‚àöd)
    elseif k < d
        return [GellMann_h(k,d-1) spzeros(d-1); spzeros(d)']
    elseif k == d
        return ‚àö(1/d/(d-1))*[sparse(I(d-1)) spzeros(d-1); spzeros(d-1)' 1-d]
    end
end


"""
    pTranspose(œÅ,d‚ÇÅ::Int=Int(‚àösize(œÅ)[1]),d‚ÇÇ::Int=Int(‚àösize(œÅ)[1]))

Returns the partial transpose of `œÅ`, defined by ‚ü®n‚ÇÅ,n‚ÇÇ|œÅ·µÄ¬≤|m‚ÇÅ,m‚ÇÇ‚ü© = ‚ü®n‚ÇÅ,m‚ÇÇ|œÅ|m‚ÇÅ,n‚ÇÇ‚ü©
"""
function pTranspose(œÅ,d‚ÇÅ::Int=Int(‚àösize(œÅ)[1]),d‚ÇÇ::Int=Int(‚àösize(œÅ)[1]))
    œÅ·µÄ¬≤ = copy(œÅ)*0
    for n‚ÇÅ ‚àà 0:d‚ÇÅ-1, n‚ÇÇ ‚àà 0:d‚ÇÇ-1, m‚ÇÅ ‚àà 0:d‚ÇÅ-1, m‚ÇÇ ‚àà 0:d‚ÇÇ-1
        # ‚ü®n‚ÇÅ,n‚ÇÇ|œÅ·µÄ¬≤|m‚ÇÅ,m‚ÇÇ‚ü© = ‚ü®n‚ÇÅ,m‚ÇÇ|œÅ|m‚ÇÅ,n‚ÇÇ‚ü©
        œÅ·µÄ¬≤[n‚ÇÅ*d‚ÇÇ + n‚ÇÇ + 1, m‚ÇÅ*d‚ÇÇ + m‚ÇÇ + 1] = œÅ[n‚ÇÅ*d‚ÇÇ + m‚ÇÇ + 1, m‚ÇÅ*d‚ÇÇ + n‚ÇÇ + 1]
    end
    return œÅ·µÄ¬≤
end

# The passive transformation for the specified angle and truncation
U = BS(Œ∏,ùêß=ùêß)

# The work is split amongst the different threads, so these
# arrays keep track of which indices each thread handles.
# For multithreading reasons, it's easier to use the linearised index
# ((ùêß+1)¬≤ √ó j + k) instead of the two indices (j,k)
ind‚ÇÅ‚ÇÇ = round.(Int,range(1, (ùêß+1)^4,length=numThreads+1))
ind‚Çä‚Çã = round.(Int,range(1,(2ùêß+1)^4,length=numThreads+1))

# These will be exactly the B‚ÉóB‚Éó, B‚ÉóB‚Éó·µÄ¬≤ and A‚ÉóA‚Éó defined in the supplementary. B‚ÉóB‚Éó
# is written in the {a‚Çä,a‚Çã} basis, while B‚ÉóB‚Éó·µÄ¬≤ and A‚ÉóA‚Éó is in the {a‚ÇÅ,a‚ÇÇ} basis.
# Also, AA‚ÇÄ‚ÇÄ = A‚ÇÄ ‚äó A‚ÇÄ, BB‚ÇÄ‚ÇÄ = B‚ÇÄ ‚äó B‚ÇÄ. Here, they are split by the thread
BB   = [spzeros(ComplexF64, (ùêß+1)^4,ind‚ÇÅ‚ÇÇ[i+1]-ind‚ÇÅ‚ÇÇ[i]) for i ‚àà 1:numThreads]
BB·µÄ¬≤ = [spzeros(ComplexF64,(2ùêß+1)^4,ind‚ÇÅ‚ÇÇ[i+1]-ind‚ÇÅ‚ÇÇ[i]) for i ‚àà 1:numThreads]
AA   = [spzeros(ComplexF64,(2ùêß+1)^4,ind‚Çä‚Çã[i+1]-ind‚Çä‚Çã[i]) for i ‚àà 1:numThreads]
Threads.@threads for i ‚àà 1:numThreads
    # Get the first and last index that this thread will handle
    jk‚ÇÄ = ind‚ÇÅ‚ÇÇ[i]+1
    jk‚ÇÅ = ind‚ÇÅ‚ÇÇ[i+1]
    for jk ‚àà jk‚ÇÄ:jk‚ÇÅ
        # Convert linearlised index back into the index pair
        j = (jk-1)√∑((ùêß+1)^2)+1
        k = jk-((ùêß+1)^2)*(j-1)

        # X is Hermitian by definition, but sometimes Julia needs a bit of a reminder
        X = GellMann_f(j,k,(ùêß+1)^2)
        BB[i][:,jk-jk‚ÇÄ+1] = sparse(X+X')[:]/2

        # Now get its partial transpose in the {a‚ÇÅ,a‚ÇÇ} basis
        X = pTranspose(U*X*U')
        BB·µÄ¬≤[i][:,jk-jk‚ÇÄ+1] = sparse(X+X')[:]/2

        # For garbage collection
        X = nothing
    end
    # Analogous steps for AA
    jk‚ÇÄ = ind‚Çä‚Çã[i]+1
    jk‚ÇÅ = ind‚Çä‚Çã[i+1]
    for jk ‚àà jk‚ÇÄ:jk‚ÇÅ
        j = (jk-1)√∑((2ùêß+1)^2)+1
        k = jk-((2ùêß+1)^2)*(j-1)
        X = GellMann_f(j,k,(2ùêß+1)^2)
        AA[i][:,jk-jk‚ÇÄ+1] = sparse(X+X')[:]/2
        X = nothing
    end
end

# Bring the results from each thread together, define B‚ÇÄ ‚äó B‚ÇÄ
BB = hcat(BB...)
BB‚ÇÄ‚ÇÄ = GellMann_f(1,1,(ùêß+1)^2)
BB·µÄ¬≤ = hcat(BB·µÄ¬≤...)
BB·µÄ¬≤‚ÇÄ‚ÇÄ = (pTranspose(U*BB‚ÇÄ‚ÇÄ*U') + pTranspose(U*BB‚ÇÄ‚ÇÄ*U')')/2
AA = hcat(AA...)
AA‚ÇÄ‚ÇÄ = GellMann_f(1,1,(2ùêß+1)^2)

# Define Q‚ÇÉ ‚àí ¬Ωùüô in the a‚Çä mode
Q‚ÇÉ‚Çä = spzeros(ùêß+1,ùêß+1)
for n ‚àà 0:ùêß
    for m ‚àà n+3:6:ùêß
        Q‚ÇÉ‚Çä[m+1,n+1] = Q‚ÇÉ‚Çä[n+1,m+1] = sgnX(n,m)/2
    end
end
# Now in the {a‚Çä,a‚Çã} space
Q‚ÇÉ‚Çä‚Çã = kron(Q‚ÇÉ‚Çä,I(ùêß+1))
# And the vector q‚Éó
q‚Éó = real.(BB'*(Q‚ÇÉ‚Çä‚Çã + Q‚ÇÉ‚Çä‚Çã')[:])/2

# Define the variables needed for the SDP
z  = Variable()
x‚Éó  = Variable( (ùêß+1)^4-1)
y‚Éó‚Çä = Variable((2ùêß+1)^4-1)
y‚Éó‚Çã = Variable((2ùêß+1)^4-1)

# The operator œÅ defined with x‚Éó
œÅ = BB‚ÇÄ‚ÇÄ/tr(BB‚ÇÄ‚ÇÄ) + reshape(BB*x‚Éó,(ùêß+1)^2,(ùêß+1)^2)

# Collect the garbage
BB = BB‚ÇÄ‚ÇÄ = nothing
GC.gc()

# The operators relating to the partial transpose of œÅ
œÅ‚Çä = z*AA‚ÇÄ‚ÇÄ/tr(AA‚ÇÄ‚ÇÄ) + reshape(AA*y‚Éó‚Çä,(2ùêß+1)^2,(2ùêß+1)^2)
œÅ‚Çã = (z-1)*AA‚ÇÄ‚ÇÄ/tr(AA‚ÇÄ‚ÇÄ) + reshape(AA*y‚Éó‚Çã,(2ùêß+1)^2,(2ùêß+1)^2)
œÅ·µÄ¬≤ = BB·µÄ¬≤‚ÇÄ‚ÇÄ/tr(BB·µÄ¬≤‚ÇÄ‚ÇÄ) + reshape(BB·µÄ¬≤*x‚Éó,(2ùêß+1)^2,(2ùêß+1)^2)

# Collect the garbage
AA‚ÇÄ‚ÇÄ = AA = BB·µÄ¬≤‚ÇÄ‚ÇÄ = BB·µÄ¬≤ = nothing
GC.gc()

# Collect the garbage
Memoization.empty_cache!(GellMann_h)
GC.gc()

# Perform the SDP
outputStrings = ["" for _ in 1:length(P‚ÇÉ)]
startTime = now()
println("Start time: $startTime")
for iP in 1:length(P‚ÇÉ)
    println("Starting $(P‚ÇÉ[iP]), $iP of $(length(P‚ÇÉ))")
    constraints = [
        œÅ  ‚™∞ 0,
        œÅ‚Çä ‚™∞ 0,
        œÅ‚Çã ‚™∞ 0,
        œÅ‚Çä-œÅ‚Çã == œÅ·µÄ¬≤,
        P‚ÇÉ[iP] == x‚Éó‚ãÖq‚Éó + 1/2
    ]
    optimizer = SCS.Optimizer()
    Convex.MOI.set(optimizer, Convex.MOI.RawOptimizerAttribute("max_iters"), 1_000_000)
    problem = minimize(2z-1,constraints)
    solve!(problem, optimizer)

    # Evaluate tr(œÅ·µÄ¬≤), making sure to normalise it.
    tr_œÅ·µÄ¬≤ = (evaluate(œÅ·µÄ¬≤)/tr(evaluate(œÅ·µÄ¬≤))) |> collect |> eigvals .|> abs |> sum
    outputStrings[iP] = "$ùêß,$Œ∏,$(P‚ÇÉ[iP]),$tr_œÅ·µÄ¬≤"

    # If it was specified, append the result into the file.
    if file != false
        open(file,"a") do io
            println(io,outputStrings[iP])
        end
    end
end
println("End time: $(now()), time taken: $(now()-startTime)")
println("")

# If no file was specified, print out the results
if file == false
    println(join(outputStrings,"\n"))
end
